{ self, ... }@inputs:
{ config, lib, pkgs, ... }:

with lib;

let
  inherit (pkgs.stdenv.hostPlatform) isDarwin;

  cfg = config.programs.firefox;

  mozillaConfigPath =
    if isDarwin then "Library/Application Support/Mozilla" else ".mozilla";

  firefoxConfigPath = if isDarwin then
    "Library/Application Support/Firefox"
  else
    "${mozillaConfigPath}/firefox";

  profilesPath =
    if isDarwin then "${firefoxConfigPath}/Profiles" else firefoxConfigPath;

  toUserJsConfig = prefs: ''
    ${concatStrings (mapAttrsToList (name: value: ''
      user_pref("${name}", ${builtins.toJSON value});
    '') prefs)}
  '';

  arkenfoxUserJs = builtins.readFile "${inputs.arkenfox-userjs}/user.js";

  mkArkenfoxUserJs = overrides: ''
    // Generated by Home Manager.

    ${arkenfoxUserJs}

    ${toUserJsConfig overrides}
  '';

  firefoxVersion = cfg.package.version;
  # Return the Arkenfox version as a string
  # see: https://blog.replit.com/nix_dynamic_version
  arkenfoxVersion = builtins.readFile (pkgs.runCommand "getArkenfoxVersion" {
    nativeBuildInputs = [ pkgs.coreutils ];
  } ''
    sed -n '4p' ${inputs.arkenfox-userjs}/user.js | cut -d ' ' -f 3 | tr -d '
    ' > $out'');
in {
  options = {
    programs.firefox = {
      profiles = mkOption {
        type = types.attrsOf (types.submodule ({ config, name, ... }: {
          options = {
            arkenfox = mkOption {
              type = with types;
                submodule {
                  options = {
                    enable = mkEnableOption "Arkenfox";
                    overrides = mkOption {
                      type = attrsOf (either bool (either int str));
                      default = { };
                      description = "Arkenfox user.js overrides.";
                    };
                  };
                };
              default = { };
              example = literalExpression ''
                {
                  enable = true;
                  overrides = {
                    ## 4504: disable letterboxing
                    "privacy.resistFingerprinting.letterboxing" = false;
                  };
                }
              '';
            };
          };
        }));
      };
    };
  };

  config = mkIf cfg.enable {
    warnings = optional (!hasPrefix arkenfoxVersion firefoxVersion) ''
      Arkenfox version ${arkenfoxVersion} does not match Firefox's (${firefoxVersion})
    '';

    home.file = mkMerge (flip mapAttrsToList cfg.profiles (_: profile: {
      "${profilesPath}/${profile.path}/user.js" =
        mkIf (profile.arkenfox.enable) {
          text = lib.mkBefore (mkArkenfoxUserJs profile.arkenfox.overrides);
        };
    }));
  };
}
